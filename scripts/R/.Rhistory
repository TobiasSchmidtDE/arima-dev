endRow = NROW(M)
startCol = 1
endCol = diagSize
M[startRow:endRow, startCol:endCol] = M[startRow:endRow, startCol:endCol] + diagonal
return (M)
}
arima_predictdml = function(weights, Z, p, q, P, Q, s, ncond){
if (p > 0) phi = weights[1:p]
if (q > 0) theta = weights[(p+1):(p+q)]
if (P > 0) Phi = weights[(p+q+1):(p+q+P)]
if (Q > 0) Theta = weights[(p+q+P+1):(p+q+P+Q)]
multiplicativeWeights = matrix(weights)
if (p>0 & P>0){
multiplicativePhi = matrix(Phi %*% t(phi), nrow=p*P, ncol=1)
multiplicativeWeights = rbind(multiplicativeWeights, multiplicativePhi)
}
if (q>0 & Q>0){
multiplicativeTheta = matrix(Theta %*% t(theta), nrow=q*Q, ncol=1)
multiplicativeWeights = rbind(multiplicativeWeights, multiplicativeTheta)
}
#print(multiplicativeWeights)
if (ncond > 0){
Z[1:ncond,] = 0
if (q > 0){
for (i in 1:q){
Z[1:(ncond+i),(p+i)] = 0
}
}
if (Q > 0){
for (i in 1:Q){
Z[1:(ncond+(i*s)),(p+q+P+i)] = 0
}
}
if (q > 0 && Q > 0){
count = 1
for(i in 1:q){
for(j in 1:Q){
Z[1:(ncond+(i+j*s)),(p+q+P+Q+P*p+count)] = 0
count = count + 1;
}
}
}
}
b = Z %*% multiplicativeWeights
A = diag(nrow= NROW(Z)) #identity matrix
if (q > 0){
for(i in 1:q){
A = addDiagonalToMatrix (A, theta[i], NROW(A)-i)
}
}
if (Q > 0){
for(i in 1:Q){
A = addDiagonalToMatrix (A, Theta[i], NROW(A)-(i*s))
}
}
if (q > 0 && Q > 0){
for(i in 1:q){
for(j in 1:Q){
A = addDiagonalToMatrix (A, theta[i]*Theta[j], NROW(A)-(i + j*s))
}
}
}
x_hat = forwardsub_solver (A, b)
return (x_hat)
}
#This function is used to calculate the error that occures when predicting using the given weights
arima_residualsdml = function(weights, X, Z, p, q, P, Q, s, ncond){
#browser()
approximated_solution = arima_predictdml(weights, Z, p, q, P, Q, s, ncond)
errs = X - approximated_solution
if (ncond > 0) errs[1:ncond] = 0
return (errs)
}
arima_residuals_c_like = function(weights, X, Z, p, q, P, Q, s, ncond){
residuals = matrix(0, nrow = NROW(X), ncol = 1);
phi = weights$phi
theta = weights$theta
if (ncond < NROW(X)){
for (l in (ncond+1):NROW(X)){
tmp = X[l]
if ((p+P*s) > 0){
for (i in 1:(p+P*s)){
tmp = tmp - (phi[i] * X[l - i])
}
}
if ((q+Q*s) > 0){
for (j in 1:(q+Q*s)){
if (l - j > 0){
tmp = tmp - (theta[j] * residuals[l - j])
}
}
}
residuals[l] = tmp
}
}
return (residuals)
}
transformParamsMultiplicative = function (weights, p, q, P, Q, s){
phi = matrix(0, nrow = p+P*s, ncol = 1)
theta = matrix(0, nrow = q+Q*s, ncol = 1)
if(p > 0) phi[1:p] = weights[1:(p)]
if(q > 0) theta[1:q] = weights[(p+1):(p+q)]
if (P > 0){
for (j in 1:P){
phi[(j*s)] = phi[(j*s)] + weights[(p+q+j)]
if (p > 0){
for (i in 1:p){
weigthsProduct = weights[(p+q+j)] * weights[i]
phi[((j*s)+i)] = phi[((j*s)+i)] - weigthsProduct
}
}
}
}
if (Q > 0){
for (j in 1:Q){
theta[(j*s)] = theta[(j*s)] + weights[(p+q+P+j)]
if (q > 0){
for (i in 1:q){
weigthsProduct = weights[(p+q+P+j)] * weights[p+i]
theta[((j*s)+i)] = theta[((j*s)+i)] + weigthsProduct
}
}
}
}
return (list("phi" = phi, "theta" = theta))
}
arima_sumofsquares = function(weights, X, Z, p, q, P, Q, s){
ncond = p + P*s
#TODO: add ncond dependend on differencing order
errs = arima_residualsdml (weights, X, Z, p, q, P, Q, s, ncond)
sumofsquares = sum(errs^2)/(NROW(X) - ncond)
return (sumofsquares)
}
arima_css = function(weights, X, Z, p, q, P, Q, s){
#return (arima_css_c(weights, X, p, q, P, Q, s))
ssq = arima_sumofsquares (weights, X, Z, p, q, P, Q, s)
css = 0.5 * log(ssq)
return (ssq)
}
arima_css_c = function (weights, X, p, q, P, Q, s){
model = arima(X, fixed = weights , order = c(p,0,q) ,  seasonal = list(order = c(P,0,Q) , period = s ), include.mean = FALSE, transform.pars = FALSE, method = c("CSS"))
return (model$sigma2)
}
arima_residuals_c = function (weights, X, Z, p, q, P, Q, s, ncond){
model = arima(X, fixed = weights , order = c(p,0,q) ,  seasonal = list(order = c(P,0,Q) , period = s ), include.mean = FALSE, transform.pars = FALSE, method = c("CSS"))
return (model$residuals)
transformedWeights = transformParamsMultiplicative(weights, p, q, P, Q, s)
residuals = arima_residuals_c_like(transformedWeights, X, Z, p, q, P, Q, s, ncond)
return (residuals)
}
arima_models = arimamodels(X, 1000, 4, 0, 4, 2, 0, 0, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
# L2 norm of descent direction at x
L2norm = function (fx){
norm = (sum(fx^2))^0.5
return (norm)
}
#Bactracking Line Search
linesearch = function (searchDirection, fx, weights, X, Z, p, q, P, Q, s){
#TODO: What are the best starting paramters?
c = 0.5
r = 0.9
m = as.numeric(t(searchDirection)%*%searchDirection)
#stepsize
ak = 1.0
new_weights = weights + ak*searchDirection
fxnew = arima_css(new_weights, X, Z, p, q, P, Q, s)
while(fxnew > fx + c*ak*m){
ak = r*ak
new_weights = weights + ak*searchDirection
fxnew = arima_css(new_weights, X, Z, p, q, P, Q, s)
}
return (new_weights)
}
#Quasi Newton Optimizer: Broyden–Fletcher–Goldfarb–Shanno
bfgs_optimizer = function (X, Z, max_iterations, p, q, P, Q, s){
nParam = p+P+q+Q
weights = matrix(0.0, nParam, 1)
fx = arima_css(weights, X, Z, p, q, P, Q, s)
gx = gradFinitDifference(weights, X, Z, p, q, P, Q, s)
norm_gx = L2norm(gx)
#The approximated inverse hessian
B = diag(1, nParam)
iter = 1
tol = 1.5 * 10^(-16)
diff = tol +1
while(norm_gx > tol & iter < max_iterations & diff > tol){
if (iter == 18){
}
print("best weights:")
print(weights)
print("bfgs iteration:")
print(iter)
print("improvement:")
print(diff)
#1. + 2. step
new_weights = linesearch ((-B%*%gx), fx, weights, X, Z, p, q, P, Q, s)
fxnew = arima_css(new_weights, X, Z, p, q, P, Q, s)
gxnew = gradFinitDifference(new_weights, X, Z, p, q, P, Q, s)
#3. step
ss = new_weights - weights # = stepsize * searchDirection
weights = new_weights
#4. step
yk = gxnew - gx
#5. step
# inverse B for next step
FT = as.numeric(t(ss)%*%yk + t(yk)%*%B%*%yk)*ss%*%t(ss)/as.numeric(t(ss)%*%yk)^2
ST = (B%*%(yk%*%t(ss)) + (ss%*%t(yk))%*%B)/as.numeric(t(ss)%*%yk)
B = B + FT - ST
diff = abs(fx - fxnew)
fx = fxnew
gx = gxnew
norm_gx = L2norm(gx)
iter = iter +1
}
print("BFGS finished with iterations:")
print(iter)
return (weights)
}
arima_models = arimamodels(X, 1000, 4, 0, 4, 2, 0, 0, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
arima_models = arimamodels(X, 1000, 4, 0, 4, 2, 0, 4, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
arima_models = arimamodels(X, 100, 4, 0, 4, 2, 0, 4, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
arima_models$builtin
arima_models$builtin$code
arima_models = arimamodels(X, 100, 4, 0, 4, 2, 0, 2, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
arima_models = arimamodels(X, 100, 2, 1, 2, 2, 0, 2, 3)
builtin_coef =arima_models$builtin$coef
mixed_coef = arima_models$mixed$par
custom_coef = arima_models$custom
comparisonCustomToBuiltin = compareArima(builtin_coef, custom_coef)
comparisonCustomToMixed = compareArima(custom_coef, mixed_coef)
comparisonMixedToBuiltin = compareArima(builtin_coef, mixed_coef)
print (cbind (builtin_coef, mixed_coef, custom_coef))
print (cbind(comparisonMixedToBuiltin, comparisonCustomToMixed, comparisonCustomToBuiltin))
X
difference(X, 1, 0, 3)
#inserts the first column of source matrix into the n-th column of target matrix with the specified row offset
addShiftedMatrix = function (targetMatrix,  sourceMatrix, rowOffset, nthColumn){
targetMatrix[(rowOffset+1):NROW(targetMatrix), nthColumn] = sourceMatrix[1:(NROW(targetMatrix)-rowOffset)]
return (targetMatrix)
}
addValuesForCombinedModel = function (targetMatrix,sourceMatrix, nonSeasonalParam, seasonalParam, seasonality, columnOffset){
counter = 1
if (nonSeasonalParam > 0 && seasonalParam > 0){
for	(k in 1:nonSeasonalParam){
for(j in 1:seasonalParam){
targetMatrix = addShiftedMatrix(targetMatrix, sourceMatrix, k + (j*seasonality), columnOffset + counter)
counter = counter+1
}
}
}
return (targetMatrix)
}
#Construts Matrix Z with all values that can be used to calculate an approximation of the timeseries in X.
#Each row in Z is used to predict the value in the corresponding row of X
#Columns of Z represent values used for predicting either AR, SAR, MA or SMA
#p+P cols for ar & sar
#q+Q cols for ma & sma
#p*P cols for multiplicative SAR
#q*Q cols for multiplicative SMA
constructPredictorMatrix = function (X, p, q, P, Q, s){
Z = matrix(0, NROW(X), p + P + Q + q + p*P + q*Q)
# fills Z with values used for non seasonal AR prediction
if (p > 0){
for(i in 1:p){
Z = addShiftedMatrix(Z, X, i, i)
}
}
#prediction values for non seasonal MA
if (q > 0){
for(i in 1:q){
Z = addShiftedMatrix(Z, X, i, p + i)
}
}
#prediction values for seasonal AR
if (P > 0){
for(i in 1:P){
Z = addShiftedMatrix(Z, X, (i * s), p + q + i)
}
}
#prediction values for seasonal MA
if (Q > 0){
for(i in 1:Q){
Z = addShiftedMatrix(Z, X, (i * s), p + q + P + i)
}
}
#prediction values for combined models of non-seasonal and seasonal AR
#for multiplicative AR the sign has to be inverted
Z = addValuesForCombinedModel (Z, (-1) * X, p, P, s, p + P + q + Q)
#prediction values for combined models of non-seasonal and seasonal MA
Z = addValuesForCombinedModel (Z, X, q, Q, s, p + P + q + Q + p*P)
return (Z)
}
difference = function (X, d, D, s) {
# d-th order differencing:
if (d > 0){
for(i in 1:d){
X = X[2:NROW(X)] - X[1:NROW(X)-1]
}
}
# D-th order differencing:
if (D > 0){
for(i in 1:D){
n1 = NROW(X)+0.0
X = X[s+1:n1] - X[1:n1-s]
}
}
return (X)
}
difference(X, 1, 0, 3)
X
difference(X, 1, 20, 3)
difference(X, 1, 1, 3)
#inserts the first column of source matrix into the n-th column of target matrix with the specified row offset
addShiftedMatrix = function (targetMatrix,  sourceMatrix, rowOffset, nthColumn){
targetMatrix[(rowOffset+1):NROW(targetMatrix), nthColumn] = sourceMatrix[1:(NROW(targetMatrix)-rowOffset)]
return (targetMatrix)
}
addValuesForCombinedModel = function (targetMatrix,sourceMatrix, nonSeasonalParam, seasonalParam, seasonality, columnOffset){
counter = 1
if (nonSeasonalParam > 0 && seasonalParam > 0){
for	(k in 1:nonSeasonalParam){
for(j in 1:seasonalParam){
targetMatrix = addShiftedMatrix(targetMatrix, sourceMatrix, k + (j*seasonality), columnOffset + counter)
counter = counter+1
}
}
}
return (targetMatrix)
}
#Construts Matrix Z with all values that can be used to calculate an approximation of the timeseries in X.
#Each row in Z is used to predict the value in the corresponding row of X
#Columns of Z represent values used for predicting either AR, SAR, MA or SMA
#p+P cols for ar & sar
#q+Q cols for ma & sma
#p*P cols for multiplicative SAR
#q*Q cols for multiplicative SMA
constructPredictorMatrix = function (X, p, q, P, Q, s){
Z = matrix(0, NROW(X), p + P + Q + q + p*P + q*Q)
# fills Z with values used for non seasonal AR prediction
if (p > 0){
for(i in 1:p){
Z = addShiftedMatrix(Z, X, i, i)
}
}
#prediction values for non seasonal MA
if (q > 0){
for(i in 1:q){
Z = addShiftedMatrix(Z, X, i, p + i)
}
}
#prediction values for seasonal AR
if (P > 0){
for(i in 1:P){
Z = addShiftedMatrix(Z, X, (i * s), p + q + i)
}
}
#prediction values for seasonal MA
if (Q > 0){
for(i in 1:Q){
Z = addShiftedMatrix(Z, X, (i * s), p + q + P + i)
}
}
#prediction values for combined models of non-seasonal and seasonal AR
#for multiplicative AR the sign has to be inverted
Z = addValuesForCombinedModel (Z, (-1) * X, p, P, s, p + P + q + Q)
#prediction values for combined models of non-seasonal and seasonal MA
Z = addValuesForCombinedModel (Z, X, q, Q, s, p + P + q + Q + p*P)
return (Z)
}
difference = function (X, d, D, s) {
# d-th order differencing:
if (d > 0){
for(i in 1:d){
X = X[2:NROW(X)] - X[1:NROW(X)-1]
}
}
# D-th order differencing:
if (D > 0){
for(i in 1:D){
n1 = NROW(X)
X = X[s+1:n1] - X[1:n1-s]
}
}
return (X)
}
difference(X, 1, 1, 3)
#inserts the first column of source matrix into the n-th column of target matrix with the specified row offset
addShiftedMatrix = function (targetMatrix,  sourceMatrix, rowOffset, nthColumn){
targetMatrix[(rowOffset+1):NROW(targetMatrix), nthColumn] = sourceMatrix[1:(NROW(targetMatrix)-rowOffset)]
return (targetMatrix)
}
addValuesForCombinedModel = function (targetMatrix,sourceMatrix, nonSeasonalParam, seasonalParam, seasonality, columnOffset){
counter = 1
if (nonSeasonalParam > 0 && seasonalParam > 0){
for	(k in 1:nonSeasonalParam){
for(j in 1:seasonalParam){
targetMatrix = addShiftedMatrix(targetMatrix, sourceMatrix, k + (j*seasonality), columnOffset + counter)
counter = counter+1
}
}
}
return (targetMatrix)
}
#Construts Matrix Z with all values that can be used to calculate an approximation of the timeseries in X.
#Each row in Z is used to predict the value in the corresponding row of X
#Columns of Z represent values used for predicting either AR, SAR, MA or SMA
#p+P cols for ar & sar
#q+Q cols for ma & sma
#p*P cols for multiplicative SAR
#q*Q cols for multiplicative SMA
constructPredictorMatrix = function (X, p, q, P, Q, s){
Z = matrix(0, NROW(X), p + P + Q + q + p*P + q*Q)
# fills Z with values used for non seasonal AR prediction
if (p > 0){
for(i in 1:p){
Z = addShiftedMatrix(Z, X, i, i)
}
}
#prediction values for non seasonal MA
if (q > 0){
for(i in 1:q){
Z = addShiftedMatrix(Z, X, i, p + i)
}
}
#prediction values for seasonal AR
if (P > 0){
for(i in 1:P){
Z = addShiftedMatrix(Z, X, (i * s), p + q + i)
}
}
#prediction values for seasonal MA
if (Q > 0){
for(i in 1:Q){
Z = addShiftedMatrix(Z, X, (i * s), p + q + P + i)
}
}
#prediction values for combined models of non-seasonal and seasonal AR
#for multiplicative AR the sign has to be inverted
Z = addValuesForCombinedModel (Z, (-1) * X, p, P, s, p + P + q + Q)
#prediction values for combined models of non-seasonal and seasonal MA
Z = addValuesForCombinedModel (Z, X, q, Q, s, p + P + q + Q + p*P)
return (Z)
}
difference = function (X, d, D, s) {
browser()
# d-th order differencing:
if (d > 0){
for(i in 1:d){
X = X[2:NROW(X)] - X[1:NROW(X)-1]
}
}
# D-th order differencing:
if (D > 0){
for(i in 1:D){
n1 = NROW(X)
X = X[s+1:n1] - X[1:n1-s]
}
}
return (X)
}
difference(X, 1, 1, 3)
n1
X
difference(X, 1, 2, 3)
difference(X, 1, 2, 3)
difference(X, 1, 2, 3)
y
x
NROW(X)
NROW(X)
xts
xts::addEventLines()
