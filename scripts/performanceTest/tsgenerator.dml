timeseriesfolder = "in/timeseries/"
tsprefix = "ts_"
weightsfolder = "in/weights/"
weightsprefix = "model_"
matrixsuffix = ".mtx"

generateMatrix = function (Integer size, String folder, String prefix, String suffix, Boolean smallWeights){
  print("generateMatrix size " + size)
  if (size != 0){
    print("Generating timeseries with size = " + size)
    timeseries = rand(rows=size, cols=1, sparsity=1.0, pdf="normal")
    if (smallWeights){
      timeseries = timeseries * 1E-1
    }
    filepath = folder + prefix + suffix
    print("Saving timeseries in " + filepath)
    write(timeseries, filepath, format="MM")
  }
}

generateMultipleTS = function (Integer factor, String folder, String prefix, String suffix, Integer start, Integer end, Integer step){
  generateMatrix (factor, folder, prefix + "1", suffix, FALSE)
  for (step in seq(start, end, step)){
      generateMatrix ((step * factor), folder, prefix + step, suffix, FALSE)
  }
}

generateMultipleModels = function (String folder, String prefix, String suffix, Boolean smallWeights){
  for (n in seq(0, 60, 1)){
      generateMatrix (n, folder, prefix + n, suffix, smallWeights)
  }
}

print("weightsfolder is " + weightsfolder)
generateMultipleModels(weightsfolder, weightsprefix, matrixsuffix, FALSE)
generateMultipleModels(weightsfolder, weightsprefix, "_small"+matrixsuffix, TRUE)


# Files of first two generateMultipleTS only ~250MByte
generateMultipleTS(1E0, timeseriesfolder, tsprefix, matrixsuffix, 0, 999, 50)
generateMultipleTS(1E3, timeseriesfolder, tsprefix, "K"+matrixsuffix, 0, 999, 50)

# This will generate about 250GB
generateMultipleTS(1E6, timeseriesfolder, tsprefix, "M"+matrixsuffix, 0, 51, 10)

# About 5 TB
#generateMultipleTS(1E9, timeseriesfolder, tsprefix, "G"+matrixsuffix, 0, 101, 10)
