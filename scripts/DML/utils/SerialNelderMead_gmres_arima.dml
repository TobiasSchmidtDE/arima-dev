# Arguments
# 1st arg: X (one column time series)
# 2nd arg: p (non-seasonal AR order)
# 3rd arg: d (non-seasonal differencing order)
# 4th arg: q (non-seasonal MA order)
# 5th arg: P (seasonal AR order)
# 6th arg: D (seasonal differencing order)
# 7th arg: Q (seasonal MA order)
# 8th arg: s (period in terms of number of time-steps)
# 9th arg: 0/1 (1 means include.mean)
# 10th arg: file name to store learnt parameters
#changing to additive sar since R's arima seems to do that



# all points are saved as 1 x dimension form
# simplex is dimension x (dimension + 1) matrix
# initial simplex


################ exact solver ################

solve = externalFunction(Matrix[Double] a, Matrix[Double] b)  return(Matrix[Double] c)
implemented in (classname="com.ibm.bi.dml.packagesupport.LinearSolverWrapperCP",exectype="mem")
################################################
#changing to additive sar since R's arima seems to do that

arima_css = function(Matrix[Double] w, Matrix[Double] X, Integer p, Integer P, Integer q, Integer Q, Integer s) return (Double obj){
	b = X[,2:ncol(X)]%*%w
	r_X = 0
	r_X=nrow(X)
	if(1==1) { print(""); }
	R = Rand(rows=r_X, cols=r_X, min=0, max=0)
	dpq = matrix(1.0,rows=r_X,cols=1)
	for(i7 in 1:q){
		ma_ind_ns = P+p+i7
		err_ind_ns = i7
		ones_ns_rows = r_X-err_ind_ns
		if(1==1) { print(""); }
		ones_ns = Rand(rows=ones_ns_rows, cols=1, min=1, max=1)
		d_ns = ones_ns * castAsScalar(w[ma_ind_ns,1])
		R[1+err_ind_ns:r_X,1:r_X-err_ind_ns] = R[1+err_ind_ns:r_X,1:r_X-err_ind_ns] + diag(d_ns)
	}
	for(i8 in 1:Q){
		ma_ind_s = P+p+q+i8
		err_ind_s = s*i8
		ones_s_rows = r_X-err_ind_s
		if ( 1 == 1 ) { print(""); }
		ones_s = Rand(rows=ones_s_rows, cols=1, min=1, max=1)
		d_s = ones_s * castAsScalar(w[ma_ind_s,1])
		R[1+err_ind_s:r_X,1:r_X-err_ind_s] = R[1+err_ind_s:r_X,1:r_X-err_ind_s] + diag(d_s)
	}
	A = diag(dpq)+R
	#print("r A "+nrow(A))
	#print("c A "+ncol(A))
	
	ng = 5
	ngplus1 = ng + 1
	mg = r_X
	if(1==1) { print("") }
	Sg = matrix(0.0,rows=r_X,cols=r_X)
	Qg = matrix(0.0,rows=r_X,cols=ngplus1)
	Qg[,1] = b/sqrt(sum(b^2))
	for(kg in 1:ng){
		v = A%*%Qg[,kg]
		for(k2 in 1:kg){
			Sg[k2,kg] = t(v)%*%Qg[,k2]
			v = v - castAsScalar(Sg[k2,kg])*Qg[,k2]
		}
		Qg[,kg+1] = v/sqrt(sum(v^2))
		Sg[kg+1,kg] = sqrt(sum(v^2))
	}	
	Sag = Sg[1:ng,1:ng]
	#print("r S a g " + nrow(Sag))
	#print("c S a g " + ncol(Sag))
	e1 = matrix(0.0,rows=ng,cols=1)
	e1[1,1] = sqrt(sum(b^2))
	y_hat = solve(Sag, e1)
	xth =  Qg[,1:ng]%*%y_hat;
		
	#print("n g "+ng)
	errs = X[,1] - xth
	obj = sum(errs*errs)
	
}




X = read($1)#time series

if(1==1){
	num_rows=nrow(X)
}


#non-seasonal order
p = $2
d = $3
q = $4

#seasonal order
P = $5
D = $6
Q = $7

#length of the season
s = $8

include_mean = $9



if(num_rows <= d){
	print("non-seasonal differencing order should be larger than length of the time-series")
}


Y = X
for(i in 1:d){
	n1 = num_rows+0.0
	Y = Y[2:n1,] - Y[1:n1-1,]
}
if(1==1){
	r_Y=nrow(Y)
}

if(r_Y <= s*D){
	print("seasonal differencing order should be larger than number of observations divided by length of season")
}



for(i in 1:D){
	n1 = r_Y+0.0
	Y = Y[s+1:n1,] - Y[1:n1-s,]
}


max_ar_col = s*P+p
max_ma_col = s*Q+q
if(max_ar_col > max_ma_col){
	max_arma_col = max_ar_col
}else{
	max_arma_col = max_ma_col
}
totcols = 1+p+P+Q+q #target col (X), p-P cols, q-Q cols
#totcols = 1+include_mean+P*p+P+p+Q*q+Q+q #target col (X), p-P cols, q-Q cols  
#print("total cols " + totcols )
totcolsMinus1 =  totcols-1



Z = Rand(rows=r_Y, cols=totcols, min=0, max=0)
Z[,1] = Y #target col

parfor(i1 in 1:p, check=0){
	Z[i1+1:r_Y,1+i1] = Y[1:r_Y-i1,]
}
parfor(i2 in 1:P, check=0){
	Z[s*i2+1:r_Y,1+p+i2] = Y[1:r_Y-s*i2,]
}
parfor(i5 in 1:q, check=0){
	Z[i5+1:r_Y,1+P+p+i5] = Y[1:r_Y-i5,]
}
parfor(i6 in 1:Q, check=0){
	Z[s*i6+1:r_Y,1+P+p+q+i6] = Y[1:r_Y-s*i6,]
}

alpha = 1
gamma = 2
rho = -0.5
sigma = 0.5


iter = 0
maxiter = 500



step = 10
simplex = matrix(0.0,rows=totcolsMinus1,cols=totcols)
guess = Rand(rows=totcolsMinus1,cols=1,min = -10,max=10) # Initial guess x 
simplex[ ,1] = guess
for(i in 2:totcols){
	simplex[ ,i] = guess
	simplex[i-1,i] = simplex[i-1,i]+step
}
# evaluating objective at each point in simplex
obj = matrix(0.0,rows=1,cols=totcols)
for(k in 1:totcols,check=0){
	temp = simplex[,k]
	foo = arima_css(temp, Z, p, P, q, Q, s)
	obj[1,k] = foo	
	#print("k "+ k +" obj "+ castAsScalar(obj[1,k]))	
}

best = 1
tol = 1.5 * 10^(-8) * castAsScalar(obj[1,best])
iter = 0
while(castAsScalar(obj[1,best]) > tol & iter < maxiter){
#sort objective value and store indices
best = 1
worst = 1
for(j in 2:ncol(obj)){
	this = castAsScalar(obj[1,j])
	that = castAsScalar(obj[1,best])
  	if(that > this){
    	best = j
  	}
  		
  	that = castAsScalar(obj[1,worst])
  	if(that < this){
    	worst = j
  	}
}
print("best ind " + best +", best_obj "+ castAsScalar(obj[1,best]))
print("worst ind " + worst +", worst_obj "+ castAsScalar(obj[1,worst]))
secw = best
for(j in 1:ncol(obj)){
	this = castAsScalar(obj[1,j])
	that = castAsScalar(obj[1,secw])
	if(j != worst & that < this){
   		secw = j
	}
}

print("second worst ind " + secw +", second worst_obj "+ castAsScalar(obj[1,secw]))

# calculate centroid w/o worst

M = matrix(0.0,rows=totcolsMinus1,cols=1)
for(j1 in 1:totcolsMinus1){
	M[j1,1] = (sum(simplex[j1,]) - simplex[j1,worst])/totcolsMinus1
}		
/*
for(j1 in 1:totcolsMinus1){
	print("j1 "+castAsScalar(M[j1,1]))
}*/



# Reflection
xR = M[,1]+ alpha*(M[,1] - simplex[,worst])
/*
for(j2 in 1:totcolsMinus1){
	print("j2 "+castAsScalar(xR[j2,1]))
}*/

fR = arima_css(xR, Z, p, P, q, Q, s)
#print("f R - " +  fR)
if(castAsScalar(obj[1,best]) <= fR & fR < castAsScalar(obj[1,secw])){
	simplex[,worst] = xR
	obj[1,worst] = fR
	print("reflection point taken")
} else {
	if(fR < castAsScalar(obj[1,best])){
		xE = M[,1] + gamma*(M[,1] - simplex[,worst])
		fE = arima_css(xE, Z, p, P, q, Q, s)
		if(fE < fR){
			simplex[,worst] = xE
			obj[1,worst] = fE
			print("expansion point taken")
		} else {
			simplex[,worst] = xR
			obj[1,worst] = fR
			print("expansion did not help keeping reflection point")
		}
	} else {
		xC = M[,1] + rho*(M[,1] - simplex[,worst])
		fC = arima_css(xC, Z, p, P, q, Q, s)
		if(fC < castAsScalar(obj[1,worst])){
			simplex[,worst] = xC
			obj[1,worst] = fC
			print("contraction point taken")
		} else {
			print("reduction")
			#print("b e s t "+best)
			for(j2 in 1:totcols){
				if(j2 != best){
					temp = simplex[,best] + sigma*(simplex[,j2] - simplex[,best])
					simplex[,j2] = temp
					foo = arima_css(temp, Z, p, P, q, Q, s)
					obj[1,j2] = foo
				}
			}
		}
	}
}
iter = iter + 1
print("w h -i-l e")
}
print("global best------------------- " + castAsScalar(obj[1,best]) + " Total num of iterations "+ iter)



if(1==1){print("")}
xb = simplex[,best]
xw = simplex[,worst]
xs = simplex[,secw]
print("x b")
for(i in 1:totcolsMinus1){
print(castAsScalar(xb[i,1]))
}
if(1==1){print("")}
print("x w")
for(i in 1:totcolsMinus1){
print(castAsScalar(xw[i,1]))
}
if(1==1){print("")}
print("x s")
for(i in 1:totcolsMinus1){
print(castAsScalar(xs[i,1]))
}
write(xb, $10, format="text")


 